--- REST.JsonReflect.pas.org	Wed Mar 09 04:37:18 2022
+++ REST.JsonReflect.pas	Sat Sep 03 07:40:04 2022
@@ -1222,8 +1222,9 @@
   LFieldName := ConvertFieldNameToJson(Field);
   if (Current is TJSONPair) and (TJSONPair(Current).JsonString.Value = LFieldName) then
   begin
-    if TJSONPair(Current).JsonValue = nil then
-      raise EConversionError.Create(Format(SFieldValueMissing, [LFieldName]));
+    // LMR:
+    // if TJSONPair(Current).JsonValue = nil then
+    //  raise EConversionError.Create(Format(SFieldValueMissing, [LFieldName]));
     FStack.Pop;
   end
   else
@@ -1757,7 +1758,8 @@
         FConverter.OnString(Value.AsString);
       TTypeKind.tkEnumeration:
         if ((fieldRTTI <> nil) and (string.CompareText('Boolean', fieldRTTI.FieldType.Name) = 0)) or
-          ((fieldRTTI = nil) and (string.CompareText('Boolean', Value.typeInfo.NameFld.ToString) = 0)) then
+        // LMR:
+          (string.CompareText('Boolean', Value.typeInfo.NameFld.ToString) = 0) then
           FConverter.OnBoolean(Value.AsBoolean)
         else
           FConverter.OnString(GetEnumName(Value.typeInfo, TValueData(Value).FAsSLong));
@@ -1823,7 +1825,11 @@
       TTypeKind.tkMethod:
         raise EConversionError.Create(Format(STypeNotSupported, ['tkMethod']));
       TTypeKind.tkVariant:
-        raise EConversionError.Create(Format(STypeNotSupported, ['tkVariant']));
+      begin
+         // LMR:
+         FConverter.OnNull;
+      	// raise EConversionError.Create(Format(STypeNotSupported, ['tkVariant']));
+      end;
       TTypeKind.tkInterface:
         raise EConversionError.Create(Format(STypeNotSupported, ['tkInterface']));
       TTypeKind.tkClassRef:
@@ -1885,6 +1891,8 @@
           Continue;
         if not ShouldMarshal(Data, rttiField) then
           Continue;
+        if (rttiField.FieldType <> nil) and (rttiField.FieldType.TypeKind = tkClass) and (rttiField.GetValue(Data).AsObject = nil) then
+          continue;
         LFieldName := rttiField.Name;
         if HasConverter(Data.ClassType, LFieldName) then
         begin
@@ -1989,6 +1997,10 @@
   LLenField: TRttiField;
   LItemsField: TRttiField;
 begin
+    // LMR : do not serialize fields starting by '_'
+    if rttiField.Name.StartsWith('_') then
+      Exit(False);
+
   if rttiField.FieldType = nil then
     Exit(False);
   case rttiField.FieldType.TypeKind of
@@ -3102,7 +3114,9 @@
                 else if jsonFieldVal is TJSONNull then
                   revAttr.ObjectsReverter(Data, LDlpFieldName, nil)
                 else
-                  raise EConversionError.Create(Format(SObjectExpectedForField, [FieldName, jsonFieldVal.ToString]));
+                  // LMR:
+                  revAttr.StringReverter(Data, LDlpFieldName, jsonFieldVal.ToString);
+                  // raise EConversionError.Create(Format(SObjectExpectedForField, [FieldName, jsonFieldVal.ToString]));
               end
           else
             raise EConversionError.Create(Format(SNoConversionForType,
@@ -3828,7 +3842,8 @@
 begin
   Assert(Data <> nil);
   // Under ARC there is always a refCount field which we DO NOT WANT serialized
-  if rttiField.Name = 'FRefCount' then
+  // LMR:
+  if (rttiField.Name = 'FRefCount') or (rttiField.Name.StartsWith('_'))  then
   begin
     Result := false;
   end
